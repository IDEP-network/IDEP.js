// source: idep/htlc/query.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('../../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var gogoproto_gogo_pb = require('../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var idep_htlc_htlc_pb = require('../../idep/htlc/htlc_pb.js');
goog.object.extend(proto, idep_htlc_htlc_pb);
goog.exportSymbol('proto.idep.htlc.QueryAssetSuppliesRequest', null, global);
goog.exportSymbol('proto.idep.htlc.QueryAssetSuppliesResponse', null, global);
goog.exportSymbol('proto.idep.htlc.QueryAssetSupplyRequest', null, global);
goog.exportSymbol('proto.idep.htlc.QueryAssetSupplyResponse', null, global);
goog.exportSymbol('proto.idep.htlc.QueryHTLCRequest', null, global);
goog.exportSymbol('proto.idep.htlc.QueryHTLCResponse', null, global);
goog.exportSymbol('proto.idep.htlc.QueryParamsRequest', null, global);
goog.exportSymbol('proto.idep.htlc.QueryParamsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idep.htlc.QueryHTLCRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idep.htlc.QueryHTLCRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idep.htlc.QueryHTLCRequest.displayName =
    'proto.idep.htlc.QueryHTLCRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idep.htlc.QueryHTLCResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idep.htlc.QueryHTLCResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idep.htlc.QueryHTLCResponse.displayName =
    'proto.idep.htlc.QueryHTLCResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idep.htlc.QueryAssetSupplyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idep.htlc.QueryAssetSupplyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idep.htlc.QueryAssetSupplyRequest.displayName =
    'proto.idep.htlc.QueryAssetSupplyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idep.htlc.QueryAssetSupplyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idep.htlc.QueryAssetSupplyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idep.htlc.QueryAssetSupplyResponse.displayName =
    'proto.idep.htlc.QueryAssetSupplyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idep.htlc.QueryAssetSuppliesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idep.htlc.QueryAssetSuppliesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idep.htlc.QueryAssetSuppliesRequest.displayName =
    'proto.idep.htlc.QueryAssetSuppliesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idep.htlc.QueryAssetSuppliesResponse = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.idep.htlc.QueryAssetSuppliesResponse.repeatedFields_,
    null
  );
};
goog.inherits(proto.idep.htlc.QueryAssetSuppliesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idep.htlc.QueryAssetSuppliesResponse.displayName =
    'proto.idep.htlc.QueryAssetSuppliesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idep.htlc.QueryParamsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idep.htlc.QueryParamsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idep.htlc.QueryParamsRequest.displayName =
    'proto.idep.htlc.QueryParamsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idep.htlc.QueryParamsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idep.htlc.QueryParamsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idep.htlc.QueryParamsResponse.displayName =
    'proto.idep.htlc.QueryParamsResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idep.htlc.QueryHTLCRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.idep.htlc.QueryHTLCRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idep.htlc.QueryHTLCRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idep.htlc.QueryHTLCRequest.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idep.htlc.QueryHTLCRequest}
 */
proto.idep.htlc.QueryHTLCRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idep.htlc.QueryHTLCRequest();
  return proto.idep.htlc.QueryHTLCRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idep.htlc.QueryHTLCRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idep.htlc.QueryHTLCRequest}
 */
proto.idep.htlc.QueryHTLCRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idep.htlc.QueryHTLCRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idep.htlc.QueryHTLCRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idep.htlc.QueryHTLCRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idep.htlc.QueryHTLCRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.idep.htlc.QueryHTLCRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.idep.htlc.QueryHTLCRequest} returns this
 */
proto.idep.htlc.QueryHTLCRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idep.htlc.QueryHTLCResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.idep.htlc.QueryHTLCResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idep.htlc.QueryHTLCResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idep.htlc.QueryHTLCResponse.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        htlc:
          (f = msg.getHtlc()) &&
          idep_htlc_htlc_pb.HTLC.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idep.htlc.QueryHTLCResponse}
 */
proto.idep.htlc.QueryHTLCResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idep.htlc.QueryHTLCResponse();
  return proto.idep.htlc.QueryHTLCResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idep.htlc.QueryHTLCResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idep.htlc.QueryHTLCResponse}
 */
proto.idep.htlc.QueryHTLCResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new idep_htlc_htlc_pb.HTLC();
        reader.readMessage(
          value,
          idep_htlc_htlc_pb.HTLC.deserializeBinaryFromReader
        );
        msg.setHtlc(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idep.htlc.QueryHTLCResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idep.htlc.QueryHTLCResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idep.htlc.QueryHTLCResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idep.htlc.QueryHTLCResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getHtlc();
  if (f != null) {
    writer.writeMessage(1, f, idep_htlc_htlc_pb.HTLC.serializeBinaryToWriter);
  }
};

/**
 * optional HTLC htlc = 1;
 * @return {?proto.idep.htlc.HTLC}
 */
proto.idep.htlc.QueryHTLCResponse.prototype.getHtlc = function() {
  return /** @type{?proto.idep.htlc.HTLC} */ (jspb.Message.getWrapperField(
    this,
    idep_htlc_htlc_pb.HTLC,
    1
  ));
};

/**
 * @param {?proto.idep.htlc.HTLC|undefined} value
 * @return {!proto.idep.htlc.QueryHTLCResponse} returns this
 */
proto.idep.htlc.QueryHTLCResponse.prototype.setHtlc = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.idep.htlc.QueryHTLCResponse} returns this
 */
proto.idep.htlc.QueryHTLCResponse.prototype.clearHtlc = function() {
  return this.setHtlc(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.idep.htlc.QueryHTLCResponse.prototype.hasHtlc = function() {
  return jspb.Message.getField(this, 1) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idep.htlc.QueryAssetSupplyRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.idep.htlc.QueryAssetSupplyRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idep.htlc.QueryAssetSupplyRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idep.htlc.QueryAssetSupplyRequest.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        denom: jspb.Message.getFieldWithDefault(msg, 1, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idep.htlc.QueryAssetSupplyRequest}
 */
proto.idep.htlc.QueryAssetSupplyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idep.htlc.QueryAssetSupplyRequest();
  return proto.idep.htlc.QueryAssetSupplyRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idep.htlc.QueryAssetSupplyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idep.htlc.QueryAssetSupplyRequest}
 */
proto.idep.htlc.QueryAssetSupplyRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setDenom(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idep.htlc.QueryAssetSupplyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idep.htlc.QueryAssetSupplyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idep.htlc.QueryAssetSupplyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idep.htlc.QueryAssetSupplyRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getDenom();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string denom = 1;
 * @return {string}
 */
proto.idep.htlc.QueryAssetSupplyRequest.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.idep.htlc.QueryAssetSupplyRequest} returns this
 */
proto.idep.htlc.QueryAssetSupplyRequest.prototype.setDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idep.htlc.QueryAssetSupplyResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.idep.htlc.QueryAssetSupplyResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idep.htlc.QueryAssetSupplyResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idep.htlc.QueryAssetSupplyResponse.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        assetSupply:
          (f = msg.getAssetSupply()) &&
          idep_htlc_htlc_pb.AssetSupply.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idep.htlc.QueryAssetSupplyResponse}
 */
proto.idep.htlc.QueryAssetSupplyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idep.htlc.QueryAssetSupplyResponse();
  return proto.idep.htlc.QueryAssetSupplyResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idep.htlc.QueryAssetSupplyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idep.htlc.QueryAssetSupplyResponse}
 */
proto.idep.htlc.QueryAssetSupplyResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new idep_htlc_htlc_pb.AssetSupply();
        reader.readMessage(
          value,
          idep_htlc_htlc_pb.AssetSupply.deserializeBinaryFromReader
        );
        msg.setAssetSupply(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idep.htlc.QueryAssetSupplyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idep.htlc.QueryAssetSupplyResponse.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idep.htlc.QueryAssetSupplyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idep.htlc.QueryAssetSupplyResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getAssetSupply();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      idep_htlc_htlc_pb.AssetSupply.serializeBinaryToWriter
    );
  }
};

/**
 * optional AssetSupply asset_supply = 1;
 * @return {?proto.idep.htlc.AssetSupply}
 */
proto.idep.htlc.QueryAssetSupplyResponse.prototype.getAssetSupply = function() {
  return /** @type{?proto.idep.htlc.AssetSupply} */ (jspb.Message.getWrapperField(
    this,
    idep_htlc_htlc_pb.AssetSupply,
    1
  ));
};

/**
 * @param {?proto.idep.htlc.AssetSupply|undefined} value
 * @return {!proto.idep.htlc.QueryAssetSupplyResponse} returns this
 */
proto.idep.htlc.QueryAssetSupplyResponse.prototype.setAssetSupply = function(
  value
) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.idep.htlc.QueryAssetSupplyResponse} returns this
 */
proto.idep.htlc.QueryAssetSupplyResponse.prototype.clearAssetSupply = function() {
  return this.setAssetSupply(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.idep.htlc.QueryAssetSupplyResponse.prototype.hasAssetSupply = function() {
  return jspb.Message.getField(this, 1) != null;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idep.htlc.QueryAssetSuppliesRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.idep.htlc.QueryAssetSuppliesRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idep.htlc.QueryAssetSuppliesRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idep.htlc.QueryAssetSuppliesRequest.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idep.htlc.QueryAssetSuppliesRequest}
 */
proto.idep.htlc.QueryAssetSuppliesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idep.htlc.QueryAssetSuppliesRequest();
  return proto.idep.htlc.QueryAssetSuppliesRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idep.htlc.QueryAssetSuppliesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idep.htlc.QueryAssetSuppliesRequest}
 */
proto.idep.htlc.QueryAssetSuppliesRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idep.htlc.QueryAssetSuppliesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idep.htlc.QueryAssetSuppliesRequest.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idep.htlc.QueryAssetSuppliesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idep.htlc.QueryAssetSuppliesRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.idep.htlc.QueryAssetSuppliesResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idep.htlc.QueryAssetSuppliesResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.idep.htlc.QueryAssetSuppliesResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idep.htlc.QueryAssetSuppliesResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idep.htlc.QueryAssetSuppliesResponse.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        assetSuppliesList: jspb.Message.toObjectList(
          msg.getAssetSuppliesList(),
          idep_htlc_htlc_pb.AssetSupply.toObject,
          includeInstance
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idep.htlc.QueryAssetSuppliesResponse}
 */
proto.idep.htlc.QueryAssetSuppliesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idep.htlc.QueryAssetSuppliesResponse();
  return proto.idep.htlc.QueryAssetSuppliesResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idep.htlc.QueryAssetSuppliesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idep.htlc.QueryAssetSuppliesResponse}
 */
proto.idep.htlc.QueryAssetSuppliesResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new idep_htlc_htlc_pb.AssetSupply();
        reader.readMessage(
          value,
          idep_htlc_htlc_pb.AssetSupply.deserializeBinaryFromReader
        );
        msg.addAssetSupplies(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idep.htlc.QueryAssetSuppliesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idep.htlc.QueryAssetSuppliesResponse.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idep.htlc.QueryAssetSuppliesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idep.htlc.QueryAssetSuppliesResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getAssetSuppliesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      idep_htlc_htlc_pb.AssetSupply.serializeBinaryToWriter
    );
  }
};

/**
 * repeated AssetSupply asset_supplies = 1;
 * @return {!Array<!proto.idep.htlc.AssetSupply>}
 */
proto.idep.htlc.QueryAssetSuppliesResponse.prototype.getAssetSuppliesList = function() {
  return /** @type{!Array<!proto.idep.htlc.AssetSupply>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    idep_htlc_htlc_pb.AssetSupply,
    1
  ));
};

/**
 * @param {!Array<!proto.idep.htlc.AssetSupply>} value
 * @return {!proto.idep.htlc.QueryAssetSuppliesResponse} returns this
 */
proto.idep.htlc.QueryAssetSuppliesResponse.prototype.setAssetSuppliesList = function(
  value
) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.idep.htlc.AssetSupply=} opt_value
 * @param {number=} opt_index
 * @return {!proto.idep.htlc.AssetSupply}
 */
proto.idep.htlc.QueryAssetSuppliesResponse.prototype.addAssetSupplies = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.idep.htlc.AssetSupply,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.idep.htlc.QueryAssetSuppliesResponse} returns this
 */
proto.idep.htlc.QueryAssetSuppliesResponse.prototype.clearAssetSuppliesList = function() {
  return this.setAssetSuppliesList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idep.htlc.QueryParamsRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.idep.htlc.QueryParamsRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idep.htlc.QueryParamsRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idep.htlc.QueryParamsRequest.toObject = function(includeInstance, msg) {
    var f,
      obj = {};

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idep.htlc.QueryParamsRequest}
 */
proto.idep.htlc.QueryParamsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idep.htlc.QueryParamsRequest();
  return proto.idep.htlc.QueryParamsRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idep.htlc.QueryParamsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idep.htlc.QueryParamsRequest}
 */
proto.idep.htlc.QueryParamsRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idep.htlc.QueryParamsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idep.htlc.QueryParamsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idep.htlc.QueryParamsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idep.htlc.QueryParamsRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idep.htlc.QueryParamsResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.idep.htlc.QueryParamsResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idep.htlc.QueryParamsResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idep.htlc.QueryParamsResponse.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        params:
          (f = msg.getParams()) &&
          idep_htlc_htlc_pb.Params.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idep.htlc.QueryParamsResponse}
 */
proto.idep.htlc.QueryParamsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idep.htlc.QueryParamsResponse();
  return proto.idep.htlc.QueryParamsResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idep.htlc.QueryParamsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idep.htlc.QueryParamsResponse}
 */
proto.idep.htlc.QueryParamsResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new idep_htlc_htlc_pb.Params();
        reader.readMessage(
          value,
          idep_htlc_htlc_pb.Params.deserializeBinaryFromReader
        );
        msg.setParams(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idep.htlc.QueryParamsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idep.htlc.QueryParamsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idep.htlc.QueryParamsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idep.htlc.QueryParamsResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getParams();
  if (f != null) {
    writer.writeMessage(1, f, idep_htlc_htlc_pb.Params.serializeBinaryToWriter);
  }
};

/**
 * optional Params params = 1;
 * @return {?proto.idep.htlc.Params}
 */
proto.idep.htlc.QueryParamsResponse.prototype.getParams = function() {
  return /** @type{?proto.idep.htlc.Params} */ (jspb.Message.getWrapperField(
    this,
    idep_htlc_htlc_pb.Params,
    1
  ));
};

/**
 * @param {?proto.idep.htlc.Params|undefined} value
 * @return {!proto.idep.htlc.QueryParamsResponse} returns this
 */
proto.idep.htlc.QueryParamsResponse.prototype.setParams = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.idep.htlc.QueryParamsResponse} returns this
 */
proto.idep.htlc.QueryParamsResponse.prototype.clearParams = function() {
  return this.setParams(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.idep.htlc.QueryParamsResponse.prototype.hasParams = function() {
  return jspb.Message.getField(this, 1) != null;
};

goog.object.extend(exports, proto.idep.htlc);
