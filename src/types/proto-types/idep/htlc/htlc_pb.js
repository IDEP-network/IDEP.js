// source: idep/htlc/htlc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var cosmos_base_v1beta1_coin_pb = require('../../cosmos/base/v1beta1/coin_pb.js');
goog.object.extend(proto, cosmos_base_v1beta1_coin_pb);
var gogoproto_gogo_pb = require('../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
goog.object.extend(proto, google_protobuf_duration_pb);
goog.exportSymbol('proto.idep.htlc.AssetParam', null, global);
goog.exportSymbol('proto.idep.htlc.AssetSupply', null, global);
goog.exportSymbol('proto.idep.htlc.HTLC', null, global);
goog.exportSymbol('proto.idep.htlc.HTLCState', null, global);
goog.exportSymbol('proto.idep.htlc.Params', null, global);
goog.exportSymbol('proto.idep.htlc.SupplyLimit', null, global);
goog.exportSymbol('proto.idep.htlc.SwapDirection', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idep.htlc.HTLC = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.idep.htlc.HTLC.repeatedFields_,
    null
  );
};
goog.inherits(proto.idep.htlc.HTLC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idep.htlc.HTLC.displayName = 'proto.idep.htlc.HTLC';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idep.htlc.AssetSupply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idep.htlc.AssetSupply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idep.htlc.AssetSupply.displayName = 'proto.idep.htlc.AssetSupply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idep.htlc.Params = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.idep.htlc.Params.repeatedFields_,
    null
  );
};
goog.inherits(proto.idep.htlc.Params, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idep.htlc.Params.displayName = 'proto.idep.htlc.Params';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idep.htlc.AssetParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idep.htlc.AssetParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idep.htlc.AssetParam.displayName = 'proto.idep.htlc.AssetParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.idep.htlc.SupplyLimit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.idep.htlc.SupplyLimit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.idep.htlc.SupplyLimit.displayName = 'proto.idep.htlc.SupplyLimit';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.idep.htlc.HTLC.repeatedFields_ = [6];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idep.htlc.HTLC.prototype.toObject = function(opt_includeInstance) {
    return proto.idep.htlc.HTLC.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idep.htlc.HTLC} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idep.htlc.HTLC.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        id: jspb.Message.getFieldWithDefault(msg, 1, ''),
        sender: jspb.Message.getFieldWithDefault(msg, 2, ''),
        to: jspb.Message.getFieldWithDefault(msg, 3, ''),
        receiverOnOtherChain: jspb.Message.getFieldWithDefault(msg, 4, ''),
        senderOnOtherChain: jspb.Message.getFieldWithDefault(msg, 5, ''),
        amountList: jspb.Message.toObjectList(
          msg.getAmountList(),
          cosmos_base_v1beta1_coin_pb.Coin.toObject,
          includeInstance
        ),
        hashLock: jspb.Message.getFieldWithDefault(msg, 7, ''),
        secret: jspb.Message.getFieldWithDefault(msg, 8, ''),
        timestamp: jspb.Message.getFieldWithDefault(msg, 9, 0),
        expirationHeight: jspb.Message.getFieldWithDefault(msg, 10, 0),
        state: jspb.Message.getFieldWithDefault(msg, 11, 0),
        closedBlock: jspb.Message.getFieldWithDefault(msg, 12, 0),
        transfer: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
        direction: jspb.Message.getFieldWithDefault(msg, 14, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idep.htlc.HTLC}
 */
proto.idep.htlc.HTLC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idep.htlc.HTLC();
  return proto.idep.htlc.HTLC.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idep.htlc.HTLC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idep.htlc.HTLC}
 */
proto.idep.htlc.HTLC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setSender(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setTo(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setReceiverOnOtherChain(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setSenderOnOtherChain(value);
        break;
      case 6:
        var value = new cosmos_base_v1beta1_coin_pb.Coin();
        reader.readMessage(
          value,
          cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader
        );
        msg.addAmount(value);
        break;
      case 7:
        var value = /** @type {string} */ (reader.readString());
        msg.setHashLock(value);
        break;
      case 8:
        var value = /** @type {string} */ (reader.readString());
        msg.setSecret(value);
        break;
      case 9:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setTimestamp(value);
        break;
      case 10:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setExpirationHeight(value);
        break;
      case 11:
        var value = /** @type {!proto.idep.htlc.HTLCState} */ (reader.readEnum());
        msg.setState(value);
        break;
      case 12:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setClosedBlock(value);
        break;
      case 13:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setTransfer(value);
        break;
      case 14:
        var value = /** @type {!proto.idep.htlc.SwapDirection} */ (reader.readEnum());
        msg.setDirection(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idep.htlc.HTLC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idep.htlc.HTLC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idep.htlc.HTLC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idep.htlc.HTLC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getReceiverOnOtherChain();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getSenderOnOtherChain();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getAmountList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getHashLock();
  if (f.length > 0) {
    writer.writeString(7, f);
  }
  f = message.getSecret();
  if (f.length > 0) {
    writer.writeString(8, f);
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(9, f);
  }
  f = message.getExpirationHeight();
  if (f !== 0) {
    writer.writeUint64(10, f);
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(11, f);
  }
  f = message.getClosedBlock();
  if (f !== 0) {
    writer.writeUint64(12, f);
  }
  f = message.getTransfer();
  if (f) {
    writer.writeBool(13, f);
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(14, f);
  }
};

/**
 * optional string id = 1;
 * @return {string}
 */
proto.idep.htlc.HTLC.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.idep.htlc.HTLC} returns this
 */
proto.idep.htlc.HTLC.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string sender = 2;
 * @return {string}
 */
proto.idep.htlc.HTLC.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/**
 * @param {string} value
 * @return {!proto.idep.htlc.HTLC} returns this
 */
proto.idep.htlc.HTLC.prototype.setSender = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string to = 3;
 * @return {string}
 */
proto.idep.htlc.HTLC.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/**
 * @param {string} value
 * @return {!proto.idep.htlc.HTLC} returns this
 */
proto.idep.htlc.HTLC.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional string receiver_on_other_chain = 4;
 * @return {string}
 */
proto.idep.htlc.HTLC.prototype.getReceiverOnOtherChain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.idep.htlc.HTLC} returns this
 */
proto.idep.htlc.HTLC.prototype.setReceiverOnOtherChain = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string sender_on_other_chain = 5;
 * @return {string}
 */
proto.idep.htlc.HTLC.prototype.getSenderOnOtherChain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.idep.htlc.HTLC} returns this
 */
proto.idep.htlc.HTLC.prototype.setSenderOnOtherChain = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * repeated cosmos.base.v1beta1.Coin amount = 6;
 * @return {!Array<!proto.cosmos.base.v1beta1.Coin>}
 */
proto.idep.htlc.HTLC.prototype.getAmountList = function() {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.Coin>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    cosmos_base_v1beta1_coin_pb.Coin,
    6
  ));
};

/**
 * @param {!Array<!proto.cosmos.base.v1beta1.Coin>} value
 * @return {!proto.idep.htlc.HTLC} returns this
 */
proto.idep.htlc.HTLC.prototype.setAmountList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};

/**
 * @param {!proto.cosmos.base.v1beta1.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.Coin}
 */
proto.idep.htlc.HTLC.prototype.addAmount = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    6,
    opt_value,
    proto.cosmos.base.v1beta1.Coin,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.idep.htlc.HTLC} returns this
 */
proto.idep.htlc.HTLC.prototype.clearAmountList = function() {
  return this.setAmountList([]);
};

/**
 * optional string hash_lock = 7;
 * @return {string}
 */
proto.idep.htlc.HTLC.prototype.getHashLock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''));
};

/**
 * @param {string} value
 * @return {!proto.idep.htlc.HTLC} returns this
 */
proto.idep.htlc.HTLC.prototype.setHashLock = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};

/**
 * optional string secret = 8;
 * @return {string}
 */
proto.idep.htlc.HTLC.prototype.getSecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ''));
};

/**
 * @param {string} value
 * @return {!proto.idep.htlc.HTLC} returns this
 */
proto.idep.htlc.HTLC.prototype.setSecret = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};

/**
 * optional uint64 timestamp = 9;
 * @return {number}
 */
proto.idep.htlc.HTLC.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};

/**
 * @param {number} value
 * @return {!proto.idep.htlc.HTLC} returns this
 */
proto.idep.htlc.HTLC.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};

/**
 * optional uint64 expiration_height = 10;
 * @return {number}
 */
proto.idep.htlc.HTLC.prototype.getExpirationHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};

/**
 * @param {number} value
 * @return {!proto.idep.htlc.HTLC} returns this
 */
proto.idep.htlc.HTLC.prototype.setExpirationHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};

/**
 * optional HTLCState state = 11;
 * @return {!proto.idep.htlc.HTLCState}
 */
proto.idep.htlc.HTLC.prototype.getState = function() {
  return /** @type {!proto.idep.htlc.HTLCState} */ (jspb.Message.getFieldWithDefault(
    this,
    11,
    0
  ));
};

/**
 * @param {!proto.idep.htlc.HTLCState} value
 * @return {!proto.idep.htlc.HTLC} returns this
 */
proto.idep.htlc.HTLC.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};

/**
 * optional uint64 closed_block = 12;
 * @return {number}
 */
proto.idep.htlc.HTLC.prototype.getClosedBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};

/**
 * @param {number} value
 * @return {!proto.idep.htlc.HTLC} returns this
 */
proto.idep.htlc.HTLC.prototype.setClosedBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};

/**
 * optional bool transfer = 13;
 * @return {boolean}
 */
proto.idep.htlc.HTLC.prototype.getTransfer = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(
    this,
    13,
    false
  ));
};

/**
 * @param {boolean} value
 * @return {!proto.idep.htlc.HTLC} returns this
 */
proto.idep.htlc.HTLC.prototype.setTransfer = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};

/**
 * optional SwapDirection direction = 14;
 * @return {!proto.idep.htlc.SwapDirection}
 */
proto.idep.htlc.HTLC.prototype.getDirection = function() {
  return /** @type {!proto.idep.htlc.SwapDirection} */ (jspb.Message.getFieldWithDefault(
    this,
    14,
    0
  ));
};

/**
 * @param {!proto.idep.htlc.SwapDirection} value
 * @return {!proto.idep.htlc.HTLC} returns this
 */
proto.idep.htlc.HTLC.prototype.setDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 14, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idep.htlc.AssetSupply.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.idep.htlc.AssetSupply.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idep.htlc.AssetSupply} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idep.htlc.AssetSupply.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        incomingSupply:
          (f = msg.getIncomingSupply()) &&
          cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f),
        outgoingSupply:
          (f = msg.getOutgoingSupply()) &&
          cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f),
        currentSupply:
          (f = msg.getCurrentSupply()) &&
          cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f),
        timeLimitedCurrentSupply:
          (f = msg.getTimeLimitedCurrentSupply()) &&
          cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f),
        timeElapsed:
          (f = msg.getTimeElapsed()) &&
          google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idep.htlc.AssetSupply}
 */
proto.idep.htlc.AssetSupply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idep.htlc.AssetSupply();
  return proto.idep.htlc.AssetSupply.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idep.htlc.AssetSupply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idep.htlc.AssetSupply}
 */
proto.idep.htlc.AssetSupply.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new cosmos_base_v1beta1_coin_pb.Coin();
        reader.readMessage(
          value,
          cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader
        );
        msg.setIncomingSupply(value);
        break;
      case 2:
        var value = new cosmos_base_v1beta1_coin_pb.Coin();
        reader.readMessage(
          value,
          cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader
        );
        msg.setOutgoingSupply(value);
        break;
      case 3:
        var value = new cosmos_base_v1beta1_coin_pb.Coin();
        reader.readMessage(
          value,
          cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader
        );
        msg.setCurrentSupply(value);
        break;
      case 4:
        var value = new cosmos_base_v1beta1_coin_pb.Coin();
        reader.readMessage(
          value,
          cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader
        );
        msg.setTimeLimitedCurrentSupply(value);
        break;
      case 5:
        var value = new google_protobuf_duration_pb.Duration();
        reader.readMessage(
          value,
          google_protobuf_duration_pb.Duration.deserializeBinaryFromReader
        );
        msg.setTimeElapsed(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idep.htlc.AssetSupply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idep.htlc.AssetSupply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idep.htlc.AssetSupply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idep.htlc.AssetSupply.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getIncomingSupply();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getOutgoingSupply();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getCurrentSupply();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getTimeLimitedCurrentSupply();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getTimeElapsed();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
};

/**
 * optional cosmos.base.v1beta1.Coin incoming_supply = 1;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.idep.htlc.AssetSupply.prototype.getIncomingSupply = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (jspb.Message.getWrapperField(
    this,
    cosmos_base_v1beta1_coin_pb.Coin,
    1
  ));
};

/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.idep.htlc.AssetSupply} returns this
 */
proto.idep.htlc.AssetSupply.prototype.setIncomingSupply = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.idep.htlc.AssetSupply} returns this
 */
proto.idep.htlc.AssetSupply.prototype.clearIncomingSupply = function() {
  return this.setIncomingSupply(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.idep.htlc.AssetSupply.prototype.hasIncomingSupply = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional cosmos.base.v1beta1.Coin outgoing_supply = 2;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.idep.htlc.AssetSupply.prototype.getOutgoingSupply = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (jspb.Message.getWrapperField(
    this,
    cosmos_base_v1beta1_coin_pb.Coin,
    2
  ));
};

/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.idep.htlc.AssetSupply} returns this
 */
proto.idep.htlc.AssetSupply.prototype.setOutgoingSupply = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.idep.htlc.AssetSupply} returns this
 */
proto.idep.htlc.AssetSupply.prototype.clearOutgoingSupply = function() {
  return this.setOutgoingSupply(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.idep.htlc.AssetSupply.prototype.hasOutgoingSupply = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional cosmos.base.v1beta1.Coin current_supply = 3;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.idep.htlc.AssetSupply.prototype.getCurrentSupply = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (jspb.Message.getWrapperField(
    this,
    cosmos_base_v1beta1_coin_pb.Coin,
    3
  ));
};

/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.idep.htlc.AssetSupply} returns this
 */
proto.idep.htlc.AssetSupply.prototype.setCurrentSupply = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.idep.htlc.AssetSupply} returns this
 */
proto.idep.htlc.AssetSupply.prototype.clearCurrentSupply = function() {
  return this.setCurrentSupply(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.idep.htlc.AssetSupply.prototype.hasCurrentSupply = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional cosmos.base.v1beta1.Coin time_limited_current_supply = 4;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.idep.htlc.AssetSupply.prototype.getTimeLimitedCurrentSupply = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (jspb.Message.getWrapperField(
    this,
    cosmos_base_v1beta1_coin_pb.Coin,
    4
  ));
};

/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.idep.htlc.AssetSupply} returns this
 */
proto.idep.htlc.AssetSupply.prototype.setTimeLimitedCurrentSupply = function(
  value
) {
  return jspb.Message.setWrapperField(this, 4, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.idep.htlc.AssetSupply} returns this
 */
proto.idep.htlc.AssetSupply.prototype.clearTimeLimitedCurrentSupply = function() {
  return this.setTimeLimitedCurrentSupply(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.idep.htlc.AssetSupply.prototype.hasTimeLimitedCurrentSupply = function() {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * optional google.protobuf.Duration time_elapsed = 5;
 * @return {?proto.google.protobuf.Duration}
 */
proto.idep.htlc.AssetSupply.prototype.getTimeElapsed = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_duration_pb.Duration,
    5
  ));
};

/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.idep.htlc.AssetSupply} returns this
 */
proto.idep.htlc.AssetSupply.prototype.setTimeElapsed = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.idep.htlc.AssetSupply} returns this
 */
proto.idep.htlc.AssetSupply.prototype.clearTimeElapsed = function() {
  return this.setTimeElapsed(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.idep.htlc.AssetSupply.prototype.hasTimeElapsed = function() {
  return jspb.Message.getField(this, 5) != null;
};

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.idep.htlc.Params.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idep.htlc.Params.prototype.toObject = function(opt_includeInstance) {
    return proto.idep.htlc.Params.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idep.htlc.Params} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idep.htlc.Params.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        assetParamsList: jspb.Message.toObjectList(
          msg.getAssetParamsList(),
          proto.idep.htlc.AssetParam.toObject,
          includeInstance
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idep.htlc.Params}
 */
proto.idep.htlc.Params.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idep.htlc.Params();
  return proto.idep.htlc.Params.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idep.htlc.Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idep.htlc.Params}
 */
proto.idep.htlc.Params.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.idep.htlc.AssetParam();
        reader.readMessage(
          value,
          proto.idep.htlc.AssetParam.deserializeBinaryFromReader
        );
        msg.addAssetParams(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idep.htlc.Params.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idep.htlc.Params.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idep.htlc.Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idep.htlc.Params.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.idep.htlc.AssetParam.serializeBinaryToWriter
    );
  }
};

/**
 * repeated AssetParam asset_params = 1;
 * @return {!Array<!proto.idep.htlc.AssetParam>}
 */
proto.idep.htlc.Params.prototype.getAssetParamsList = function() {
  return /** @type{!Array<!proto.idep.htlc.AssetParam>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.idep.htlc.AssetParam,
    1
  ));
};

/**
 * @param {!Array<!proto.idep.htlc.AssetParam>} value
 * @return {!proto.idep.htlc.Params} returns this
 */
proto.idep.htlc.Params.prototype.setAssetParamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.idep.htlc.AssetParam=} opt_value
 * @param {number=} opt_index
 * @return {!proto.idep.htlc.AssetParam}
 */
proto.idep.htlc.Params.prototype.addAssetParams = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.idep.htlc.AssetParam,
    opt_index
  );
};

/**
 * Clears the list making it empty but non-null.
 * @return {!proto.idep.htlc.Params} returns this
 */
proto.idep.htlc.Params.prototype.clearAssetParamsList = function() {
  return this.setAssetParamsList([]);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idep.htlc.AssetParam.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.idep.htlc.AssetParam.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idep.htlc.AssetParam} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idep.htlc.AssetParam.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        denom: jspb.Message.getFieldWithDefault(msg, 1, ''),
        supplyLimit:
          (f = msg.getSupplyLimit()) &&
          proto.idep.htlc.SupplyLimit.toObject(includeInstance, f),
        active: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
        deputyAddress: jspb.Message.getFieldWithDefault(msg, 4, ''),
        fixedFee: jspb.Message.getFieldWithDefault(msg, 5, ''),
        minSwapAmount: jspb.Message.getFieldWithDefault(msg, 6, ''),
        maxSwapAmount: jspb.Message.getFieldWithDefault(msg, 7, ''),
        minBlockLock: jspb.Message.getFieldWithDefault(msg, 8, 0),
        maxBlockLock: jspb.Message.getFieldWithDefault(msg, 9, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idep.htlc.AssetParam}
 */
proto.idep.htlc.AssetParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idep.htlc.AssetParam();
  return proto.idep.htlc.AssetParam.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idep.htlc.AssetParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idep.htlc.AssetParam}
 */
proto.idep.htlc.AssetParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setDenom(value);
        break;
      case 2:
        var value = new proto.idep.htlc.SupplyLimit();
        reader.readMessage(
          value,
          proto.idep.htlc.SupplyLimit.deserializeBinaryFromReader
        );
        msg.setSupplyLimit(value);
        break;
      case 3:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setActive(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setDeputyAddress(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setFixedFee(value);
        break;
      case 6:
        var value = /** @type {string} */ (reader.readString());
        msg.setMinSwapAmount(value);
        break;
      case 7:
        var value = /** @type {string} */ (reader.readString());
        msg.setMaxSwapAmount(value);
        break;
      case 8:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setMinBlockLock(value);
        break;
      case 9:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setMaxBlockLock(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idep.htlc.AssetParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idep.htlc.AssetParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idep.htlc.AssetParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idep.htlc.AssetParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDenom();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getSupplyLimit();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.idep.htlc.SupplyLimit.serializeBinaryToWriter
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(3, f);
  }
  f = message.getDeputyAddress();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
  f = message.getFixedFee();
  if (f.length > 0) {
    writer.writeString(5, f);
  }
  f = message.getMinSwapAmount();
  if (f.length > 0) {
    writer.writeString(6, f);
  }
  f = message.getMaxSwapAmount();
  if (f.length > 0) {
    writer.writeString(7, f);
  }
  f = message.getMinBlockLock();
  if (f !== 0) {
    writer.writeUint64(8, f);
  }
  f = message.getMaxBlockLock();
  if (f !== 0) {
    writer.writeUint64(9, f);
  }
};

/**
 * optional string denom = 1;
 * @return {string}
 */
proto.idep.htlc.AssetParam.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.idep.htlc.AssetParam} returns this
 */
proto.idep.htlc.AssetParam.prototype.setDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional SupplyLimit supply_limit = 2;
 * @return {?proto.idep.htlc.SupplyLimit}
 */
proto.idep.htlc.AssetParam.prototype.getSupplyLimit = function() {
  return /** @type{?proto.idep.htlc.SupplyLimit} */ (jspb.Message.getWrapperField(
    this,
    proto.idep.htlc.SupplyLimit,
    2
  ));
};

/**
 * @param {?proto.idep.htlc.SupplyLimit|undefined} value
 * @return {!proto.idep.htlc.AssetParam} returns this
 */
proto.idep.htlc.AssetParam.prototype.setSupplyLimit = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.idep.htlc.AssetParam} returns this
 */
proto.idep.htlc.AssetParam.prototype.clearSupplyLimit = function() {
  return this.setSupplyLimit(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.idep.htlc.AssetParam.prototype.hasSupplyLimit = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional bool active = 3;
 * @return {boolean}
 */
proto.idep.htlc.AssetParam.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(
    this,
    3,
    false
  ));
};

/**
 * @param {boolean} value
 * @return {!proto.idep.htlc.AssetParam} returns this
 */
proto.idep.htlc.AssetParam.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};

/**
 * optional string deputy_address = 4;
 * @return {string}
 */
proto.idep.htlc.AssetParam.prototype.getDeputyAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.idep.htlc.AssetParam} returns this
 */
proto.idep.htlc.AssetParam.prototype.setDeputyAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string fixed_fee = 5;
 * @return {string}
 */
proto.idep.htlc.AssetParam.prototype.getFixedFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/**
 * @param {string} value
 * @return {!proto.idep.htlc.AssetParam} returns this
 */
proto.idep.htlc.AssetParam.prototype.setFixedFee = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional string min_swap_amount = 6;
 * @return {string}
 */
proto.idep.htlc.AssetParam.prototype.getMinSwapAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''));
};

/**
 * @param {string} value
 * @return {!proto.idep.htlc.AssetParam} returns this
 */
proto.idep.htlc.AssetParam.prototype.setMinSwapAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};

/**
 * optional string max_swap_amount = 7;
 * @return {string}
 */
proto.idep.htlc.AssetParam.prototype.getMaxSwapAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''));
};

/**
 * @param {string} value
 * @return {!proto.idep.htlc.AssetParam} returns this
 */
proto.idep.htlc.AssetParam.prototype.setMaxSwapAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};

/**
 * optional uint64 min_block_lock = 8;
 * @return {number}
 */
proto.idep.htlc.AssetParam.prototype.getMinBlockLock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};

/**
 * @param {number} value
 * @return {!proto.idep.htlc.AssetParam} returns this
 */
proto.idep.htlc.AssetParam.prototype.setMinBlockLock = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};

/**
 * optional uint64 max_block_lock = 9;
 * @return {number}
 */
proto.idep.htlc.AssetParam.prototype.getMaxBlockLock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};

/**
 * @param {number} value
 * @return {!proto.idep.htlc.AssetParam} returns this
 */
proto.idep.htlc.AssetParam.prototype.setMaxBlockLock = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.idep.htlc.SupplyLimit.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.idep.htlc.SupplyLimit.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.idep.htlc.SupplyLimit} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.idep.htlc.SupplyLimit.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        limit: jspb.Message.getFieldWithDefault(msg, 1, ''),
        timeLimited: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
        timePeriod:
          (f = msg.getTimePeriod()) &&
          google_protobuf_duration_pb.Duration.toObject(includeInstance, f),
        timeBasedLimit: jspb.Message.getFieldWithDefault(msg, 4, ''),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.idep.htlc.SupplyLimit}
 */
proto.idep.htlc.SupplyLimit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.idep.htlc.SupplyLimit();
  return proto.idep.htlc.SupplyLimit.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.idep.htlc.SupplyLimit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.idep.htlc.SupplyLimit}
 */
proto.idep.htlc.SupplyLimit.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setLimit(value);
        break;
      case 2:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setTimeLimited(value);
        break;
      case 3:
        var value = new google_protobuf_duration_pb.Duration();
        reader.readMessage(
          value,
          google_protobuf_duration_pb.Duration.deserializeBinaryFromReader
        );
        msg.setTimePeriod(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setTimeBasedLimit(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.idep.htlc.SupplyLimit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.idep.htlc.SupplyLimit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.idep.htlc.SupplyLimit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.idep.htlc.SupplyLimit.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getLimit();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getTimeLimited();
  if (f) {
    writer.writeBool(2, f);
  }
  f = message.getTimePeriod();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
  f = message.getTimeBasedLimit();
  if (f.length > 0) {
    writer.writeString(4, f);
  }
};

/**
 * optional string limit = 1;
 * @return {string}
 */
proto.idep.htlc.SupplyLimit.prototype.getLimit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * @param {string} value
 * @return {!proto.idep.htlc.SupplyLimit} returns this
 */
proto.idep.htlc.SupplyLimit.prototype.setLimit = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional bool time_limited = 2;
 * @return {boolean}
 */
proto.idep.htlc.SupplyLimit.prototype.getTimeLimited = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(
    this,
    2,
    false
  ));
};

/**
 * @param {boolean} value
 * @return {!proto.idep.htlc.SupplyLimit} returns this
 */
proto.idep.htlc.SupplyLimit.prototype.setTimeLimited = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};

/**
 * optional google.protobuf.Duration time_period = 3;
 * @return {?proto.google.protobuf.Duration}
 */
proto.idep.htlc.SupplyLimit.prototype.getTimePeriod = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_duration_pb.Duration,
    3
  ));
};

/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.idep.htlc.SupplyLimit} returns this
 */
proto.idep.htlc.SupplyLimit.prototype.setTimePeriod = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};

/**
 * Clears the message field making it undefined.
 * @return {!proto.idep.htlc.SupplyLimit} returns this
 */
proto.idep.htlc.SupplyLimit.prototype.clearTimePeriod = function() {
  return this.setTimePeriod(undefined);
};

/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.idep.htlc.SupplyLimit.prototype.hasTimePeriod = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional string time_based_limit = 4;
 * @return {string}
 */
proto.idep.htlc.SupplyLimit.prototype.getTimeBasedLimit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/**
 * @param {string} value
 * @return {!proto.idep.htlc.SupplyLimit} returns this
 */
proto.idep.htlc.SupplyLimit.prototype.setTimeBasedLimit = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * @enum {number}
 */
proto.idep.htlc.HTLCState = {
  HTLC_STATE_OPEN: 0,
  HTLC_STATE_COMPLETED: 1,
  HTLC_STATE_REFUNDED: 2,
};

/**
 * @enum {number}
 */
proto.idep.htlc.SwapDirection = {
  NONE: 0,
  INCOMING: 1,
  OUTGOING: 2,
};

goog.object.extend(exports, proto.idep.htlc);
